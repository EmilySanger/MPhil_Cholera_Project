###This file contains the code I used for generating histpgrams which orders serogroups by thier gene_count
## Date of Work: 17 May


### PART 1: Genes ###

# Create a gene.matrix by uploading the gene_presence_absence.Rtab
gene.matrix <- read.table("/Users/ep16/Library/CloudStorage/GoogleDrive-ep16@sanger.ac.uk/My Drive/Documents /SHH_Temrinal Files/out.panarootest_gff_190_3/gene_presence_absence_3.Rtab",header = T, stringsAsFactors = F, check.names = T, comment.char = "", quote = "", row.names = 1)
View(gene.matrix)

## Part 1A: Create a Summary Table
# Calculate the total count of genes in each serogroup
serogroup_counts <- colSums(gene.matrix != 0)

# Define the breakpoints for gene count sections
breakpoints <- c(1, 10, 20, 30, 40, 50, 60)

# Create a data frame with the gene count sections
gene_count_df <- data.frame(Gene_Count = serogroup_counts)
gene_count_df$Gene_Count_Section <- cut(serogroup_counts, breakpoints, include.lowest = TRUE, labels = c("1-9", "10-19", "20-29", "30-39", "40-49", "50-59"))

# Count the occurrences of each gene count section
gene_count_table <- table(gene_count_df$Gene_Count_Section)

# Create a new data frame with column names
gene_count_table <- data.frame(Gene_Count_Section = names(gene_count_table), Serotype_Count = as.vector(gene_count_table))

# View the gene count table
View(gene_count_table)



## Part 1B: Generate a graph
library(ggplot2)

# Calculate the number of genes per serogroup
gene_counts <- colSums(gene.matrix != 0)

# Create a data frame with serogroup and gene count
serogroup_data <- data.frame(Serogroup = names(gene_counts), Gene_Count = gene_counts)

# Order the data frame by gene count
serogroup_data <- serogroup_data[order(serogroup_data$Gene_Count), ]

# Convert Serogroup to factor with desired order
serogroup_data$Serogroup <- factor(serogroup_data$Serogroup, levels = serogroup_data$Serogroup)

# Create the plot with points and line of best fit
ggplot(data = serogroup_data, aes(x = Serogroup, y = Gene_Count)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(x = "Serogroup", y = "Gene Count") +
  ggtitle("Number of Genes per Serogroup") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
 
 
## Part 1C: Generate a Histogram
# Count the number of genes for each serogroup
serogroup_counts <- colSums(gene.matrix)

# Create a new table
gene_counts_table <- data.frame(Serogroup = names(serogroup_counts), Gene_Count = serogroup_counts)

# Create a histogram with overlaid density plot
library(ggplot2)

# Sample data (replace with your actual data)
data <- gene_counts_table

# Create the histogram with density plot using ggplot
histogram_density_plot <- ggplot(data, aes(x = Gene_Count)) +
  geom_histogram(aes(y = after_stat(density)), color = "black", fill = "skyblue", alpha = 0.8, bins = 20) +
  geom_density(color = "red", size = 1) +
  labs(x = "Gene Count", y = "Density", title = "Total Gene Count Across Serogroups") +
  theme_minimal()

# Show the histogram with the density plot
print(histogram_density_plot)


  
  
### PART 2: Stuructures ###

# Create a structure.matrix by uploading the struct_presence_absence.Rtab
structure.matrix <- read.table("/Users/ep16/Library/CloudStorage/GoogleDrive-ep16@sanger.ac.uk/My Drive/Documents /SHH_Temrinal Files/out.panarootest_gff_190_3/struct_presence_absence_3.Rtab",header = T, stringsAsFactors = F, check.names = T, comment.char = "", quote = "", row.names = 1)


## Part 2A: Create a Summary Table
# Calculate the total count of structures in each serogroup
serogroup_counts <- colSums(structure.matrix != 0)

# Define the breakpoints for structure count sections
breakpoints <- c(0, 5, 10, 15, 20, Inf)

# Create a data frame with the structure count sections
structure_count_df <- data.frame(structure_Count = serogroup_counts)
structure_count_df$structure_Count_Section <- cut(serogroup_counts, breakpoints, include.lowest = TRUE, labels = c("1-5", "6-9", "10-14", "15-20", "20+"))

# Count the occurrences of each structure count section
structure_count_table <- table(structure_count_df$structure_Count_Section)

# Create a new data frame with column names
structure_count_table <- data.frame(structure_Count_Section = names(structure_count_table), Serotype_Count = as.vector(structure_count_table))

# View the structure count table
View(structure_count_table)



## PART 2B: Generate a graph
library(ggplot2)

# Calculate the number of structures per serogroup
structure_counts <- colSums(structure.matrix != 0)

# Create a data frame with serogroup and structure count
serogroup_data <- data.frame(Serogroup = names(structure_counts), structure_Count = structure_counts)

# Order the data frame by structure count
serogroup_data <- serogroup_data[order(serogroup_data$structure_Count), ]

# Convert Serogroup to factor with desired order
serogroup_data$Serogroup <- factor(serogroup_data$Serogroup, levels = serogroup_data$Serogroup)

# Create the plot with points and line of best fit
ggplot(data = serogroup_data, aes(x = Serogroup, y = structure_Count)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(x = "Serogroup", y = "Structure Count") +
  ggtitle("Number of Structure per Serogroup") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
  
   
   
   
## PART 2C: Generate a histogram
# Count the number of structures for each serogroup
serogroup_counts <- colSums(structure.matrix)

# Create a new table
structure_counts_table <- data.frame(Serogroup = names(serogroup_counts), Structure_Count = serogroup_counts)

# Create a histogram with overlaid density plot
library(ggplot2)

# Sample data (replace with your actual data)
data <- structure_counts_table

# Create the histogram with density plot using ggplot
histogram_density_plot <- ggplot(data, aes(x = Structure_Count)) +
  geom_histogram(aes(y = after_stat(density)), color = "black", fill = "skyblue", alpha = 0.8, bins = 20) +
  geom_density(color = "red", size = 1) +
  labs(x = "Structure Count", y = "Density", title = "Total Structure Count Across Serogroups") +
  theme_minimal()

# Show the histogram with the density plot
print(histogram_density_plot)


# PART 2D: Summary Statistics 
# Calculate summary statistics for structure counts
summary_stats <- summary(structure_counts_table$Structure_Count)
mode_value <- mode(structure_counts_table$Structure_Count)
sd_value <- sd(structure_counts_table$Structure_Count)

# Print the summary statistics
cat("Summary Statistics:\n")
print(summary_stats)
cat("\nMode:", mode_value)
cat("\nStandard Deviation:", sd_value)

# Perform Shapiro-Wilk test for normality
shapiro_test <- shapiro.test(structure_counts_table$Structure_Count)

# Print the result of Shapiro-Wilk test
cat("\nShapiro-Wilk Test for Normality:")
print(shapiro_test)





